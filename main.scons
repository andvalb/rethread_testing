import os
import distutils.spawn

def GetAbsolutePaths(filenames):
	return map(lambda f: File(f).abspath, filenames)

dependency_install_prefix = Dir('#/build/install').abspath

def buildGoogleTest(env):
	env.Append(CPPPATH = ['#/thirdparty/googletest/googletest/include', '#/thirdparty/googletest/googlemock/include', '#/thirdparty/googletest/googletest', '#/thirdparty/googletest/googlemock'])
	googletest_files = Split('#/thirdparty/googletest/googletest/src/gtest-all.cc #/thirdparty/googletest/googlemock/src/gmock-all.cc')
	return env.StaticLibrary(googletest_files)

def find_executable(executable, env):
	return distutils.spawn.find_executable(executable, env['ENV']['PATH'])

def selectCMakeVSArch(env):
	if env['TARGET_ARCH'] in ['x86', 'i386']:
		return ''
	elif env['TARGET_ARCH'] in ['amd64', 'x86_64']:
		return ' Win64'
	else:
		raise RuntimeError('Unknown arch: {}'.format(env['TARGET_ARCH']))

def selectCMakeVSGenerator(env):
	if env['MSVS_VERSION'] == '14.0':
		return 'Visual Studio 14 2015' + selectCMakeVSArch(env)
	elif env['MSVS_VERSION'] == '12.0':
		return 'Visual Studio 12 2013' + selectCMakeVSArch(env)
	elif env['MSVS_VERSION'] == '11.0':
		return 'Visual Studio 11 2012' + selectCMakeVSArch(env)
	elif env['MSVS_VERSION'] == '10.0':
		return 'Visual Studio 10 2010' + selectCMakeVSArch(env)
	else:
		raise RuntimeError('Unknown MSVS version: {}'.format(env['MSVS_VERSION']))

def buildCMakeCommand(env, buildDir, sourceDir, installDir, buildTarget, buildType):
	buildDirAbs = Dir(buildDir).abspath
	sourceDirAbs = Dir(sourceDir).abspath
	installDirAbs = Dir(installDir).abspath
	if env['PLATFORM'] in ['posix']:
		return 'cd "{buildDirAbs}" && cmake$PROGSUFFIX -DCMAKE_C_COMPILER="$CC" -DCMAKE_C_FLAGS="$CCFLAGS" -DCMAKE_CXX_COMPILER="$CXX" -DCMAKE_CXX_FLAGS="$CPPFLAGS" -DCMAKE_INSTALL_PREFIX="{installDirAbs}" "{sourceDirAbs}" && cmake$PROGSUFFIX --build . --target {buildTarget}'.format(**locals())
	elif env['PLATFORM'] in ['win32']:
		cmakeGenerator = selectCMakeVSGenerator(env)
		return 'cd "{buildDirAbs}" && cmake$PROGSUFFIX -G"{cmakeGenerator}" -DCMAKE_C_FLAGS="$CCFLAGS" -DCMAKE_CXX_FLAGS="$CPPFLAGS" -DCMAKE_INSTALL_PREFIX="{installDirAbs}" "{sourceDirAbs}" && cmake$PROGSUFFIX --build . --target {buildTarget} --config {buildType}'.format(**locals())
	else:
		raise RuntimeError('Unknown platform: {}'.format(env['PLATFORM']))

def buildGoogleBenchmark(env):
	new_env = env.Clone(ENV = os.environ) # we need to pass all the environment variables to CMake
	result = [new_env.Command(
		os.path.join(dependency_install_prefix, 'lib', new_env['LIBPREFIX'] + 'benchmark' + new_env['LIBSUFFIX']),
		None, [Mkdir('build/thirdparty/benchmark'),
		       buildCMakeCommand(new_env, '#/build/thirdparty/benchmark/', '#/thirdparty/benchmark/', '#/build/install/', 'install', new_env['BUILD_TYPE'])])]
	if env['PLATFORM'] in ['win32']:
		result += ['Shlwapi.lib']
	return result

vars = Variables(None, ARGUMENTS)
vars.AddVariables(
	EnumVariable('BUILD_TYPE', 'Build type', 'Release', allowed_values = ('Debug', 'Release', 'RelWithDebInfo')),
	('CXX', 'C++ compiler'),
	('CLANG_SANITIZE', 'Clang sanitizer to use (thread|address|undefined|...)'),
	BoolVariable('CLANG_ANALYZE', 'Allow static analyzer by passing some environment variables to compiler', False)
)

env = Environment(variables = vars)
Help(vars.GenerateHelpText(env))

if env['CLANG_ANALYZE']:
	env['CC'] = os.getenv('CC')
	env['CXX'] = os.getenv('CXX')
	env['ENV'].update(x for x in os.environ.items() if x[0].startswith('CCC_'))

env.Append(CPPPATH = ['#', '#/rethread', os.path.join(dependency_install_prefix, 'include')])
env.Append(LIBPATH = [os.path.join(dependency_install_prefix, 'lib')])

add_forced_include = lambda env, include: None

compiler = os.path.basename(env.subst(env['CXX']))
if compiler.startswith('g++') or compiler.startswith('clang') or compiler.startswith('c++-analyzer'):
	env.Append(CPPFLAGS = Split('-std=c++11 -Werror=all -Werror=extra -Werror=pedantic -pedantic -pedantic-errors'))
	env.Append(CPPDEFINES = 'RETHREAD_HAS_POLL')
	env.Append(LINKFLAGS = Split('-pthread'))

	add_forced_include = lambda env, include: env.Append(CPPFLAGS = ['-include', include])

	if env['BUILD_TYPE'] == 'Debug':
		env.Append(CPPFLAGS = Split('-ggdb -fno-omit-frame-pointer'))
	elif env['BUILD_TYPE'] == 'Release':
		env.Append(CPPFLAGS = Split('-O2 -DNDEBUG'))
	elif env['BUILD_TYPE'] == 'RelWithDebInfo':
		env.Append(CPPFLAGS = Split('-ggdb -fno-omit-frame-pointer -O2 -DNDEBUG'))
	else:
		raise RuntimeError('Unknown build type: {}'.format(env['BUILD_TYPE']))

	if 'CLANG_SANITIZE' in env:
		env.Append(CPPFLAGS = ['-fsanitize=$CLANG_SANITIZE'])
		env.Append(LINKFLAGS = ['-fsanitize=$CLANG_SANITIZE'])
elif compiler.startswith('cl'):
	if env['BUILD_TYPE'] == 'Debug':
		env.Append(CPPFLAGS = Split('-Zi -nologo -W4 -WX- -Od -Ob0 -Oy- -DWIN32 -D_WINDOWS -D_DEBUG -D_MBCS -Gm- -EHsc -RTC1 -MDd -GS -fp:precise -Zc:wchar_t -Zc:forScope -Zc:inline -GR -Gd -TP'))
	elif env['BUILD_TYPE'] == 'Release':
		env.Append(CPPFLAGS = Split('-nologo -W3 -WX- -O2 -Ob2 -Oy- -DWIN32 -D_WINDOWS -DNDEBUG -D_MBCS -Gm- -EHsc -MD -GS -fp:precise -Zc:wchar_t -Zc:forScope -Zc:inline -Gd -TP'))
	elif env['BUILD_TYPE'] == 'RelWithDebInfo':
		env.Append(CPPFLAGS = Split('-Zi -nologo -W3 -WX- -O2 -Ob1 -Oy- -DWIN32 -D_WINDOWS -DNDEBUG -D_MBCS -Gm- -EHsc -MD -GS -fp:precise -Zc:wchar_t -Zc:forScope -Zc:inline -GR -Gd -TP'))
	else:
		raise RuntimeError('Unknown build type: {}'.format(env['BUILD_TYPE']))
else:
	raise RuntimeError('Unknown compiler: {}'.format(compiler))

benchmark_env = env.Clone()

conf = Configure(env)
if conf.CheckHeader('valgrind/helgrind.h'):
	conf.env.Append(CPPDEFINES = 'RETHREAD_USE_HELGRIND_ANNOTATIONS')
	add_forced_include(env, File('#/test/helgrind_annotations.h').abspath)
env = conf.Finish()

source_files = Split('test/test.cpp')
object_files = env.Object(source_files)

test_runner = env.Program('test_runner', object_files, LIBS = [buildGoogleTest(env)])
env.Default(test_runner)

test_execution = env.Alias('test', [test_runner], test_runner[0].abspath)
AlwaysBuild(test_execution)

benchmark_env.Append(CPPDEFINES = 'RETHREAD_SUPPRESS_CHECKS')
gbenchmark_lib = buildGoogleBenchmark(benchmark_env)
benchmark_runner = benchmark_env.Program('benchmark_runner', ['benchmark/benchmark.cpp', 'benchmark/cv_mock_noinline.cpp'], LIBS = [gbenchmark_lib])
benchmark_env.Requires(benchmark_runner, gbenchmark_lib) # because includes need to be installed before building benchmarks
benchmark_env.Default(benchmark_runner)

benchmark_execution = benchmark_env.Alias('benchmark', [benchmark_runner], benchmark_runner[0].abspath)
AlwaysBuild(benchmark_execution)
